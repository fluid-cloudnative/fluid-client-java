/*
 * fluid
 * client for fluid
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import from kubernetes.client import V1ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import models.PodMetadata;
import models.V1VolumeMount;

/**
 * AlluxioFuseSpec is a description of the Alluxio Fuse
 */
@ApiModel(description = "AlluxioFuseSpec is a description of the Alluxio Fuse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T14:39:14.140796+08:00[Asia/Shanghai]")
public class AlluxioFuseSpec {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_CLEAN_POLICY = "cleanPolicy";
  @SerializedName(SERIALIZED_NAME_CLEAN_POLICY)
  private String cleanPolicy;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Map<String, String> env = null;

  public static final String SERIALIZED_NAME_GLOBAL = "global";
  @SerializedName(SERIALIZED_NAME_GLOBAL)
  private Boolean global;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private String imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_TAG = "imageTag";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAG)
  private String imageTag;

  public static final String SERIALIZED_NAME_JVM_OPTIONS = "jvmOptions";
  @SerializedName(SERIALIZED_NAME_JVM_OPTIONS)
  private List<String> jvmOptions = null;

  public static final String SERIALIZED_NAME_NETWORK_MODE = "networkMode";
  @SerializedName(SERIALIZED_NAME_NETWORK_MODE)
  private String networkMode;

  public static final String SERIALIZED_NAME_NODE_SELECTOR = "nodeSelector";
  @SerializedName(SERIALIZED_NAME_NODE_SELECTOR)
  private Map<String, String> nodeSelector = null;

  public static final String SERIALIZED_NAME_POD_METADATA = "podMetadata";
  @SerializedName(SERIALIZED_NAME_POD_METADATA)
  private PodMetadata podMetadata;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = null;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1ResourceRequirements resources = null;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<V1VolumeMount> volumeMounts = null;


  public AlluxioFuseSpec args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public AlluxioFuseSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<String>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Arguments that will be passed to Alluxio Fuse
   * @return args
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arguments that will be passed to Alluxio Fuse")

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public AlluxioFuseSpec cleanPolicy(String cleanPolicy) {
    
    this.cleanPolicy = cleanPolicy;
    return this;
  }

   /**
   * CleanPolicy decides when to clean Alluxio Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted
   * @return cleanPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CleanPolicy decides when to clean Alluxio Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted")

  public String getCleanPolicy() {
    return cleanPolicy;
  }


  public void setCleanPolicy(String cleanPolicy) {
    this.cleanPolicy = cleanPolicy;
  }


  public AlluxioFuseSpec env(Map<String, String> env) {
    
    this.env = env;
    return this;
  }

  public AlluxioFuseSpec putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<String, String>();
    }
    this.env.put(key, envItem);
    return this;
  }

   /**
   * Environment variables that will be used by Alluxio Fuse
   * @return env
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Environment variables that will be used by Alluxio Fuse")

  public Map<String, String> getEnv() {
    return env;
  }


  public void setEnv(Map<String, String> env) {
    this.env = env;
  }


  public AlluxioFuseSpec global(Boolean global) {
    
    this.global = global;
    return this;
  }

   /**
   * If the fuse client should be deployed in global mode, otherwise the affinity should be considered
   * @return global
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the fuse client should be deployed in global mode, otherwise the affinity should be considered")

  public Boolean getGlobal() {
    return global;
  }


  public void setGlobal(Boolean global) {
    this.global = global;
  }


  public AlluxioFuseSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Image for Alluxio Fuse(e.g. alluxio/alluxio-fuse)
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image for Alluxio Fuse(e.g. alluxio/alluxio-fuse)")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public AlluxioFuseSpec imagePullPolicy(String imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * One of the three policies: &#x60;Always&#x60;, &#x60;IfNotPresent&#x60;, &#x60;Never&#x60;
   * @return imagePullPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One of the three policies: `Always`, `IfNotPresent`, `Never`")

  public String getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public AlluxioFuseSpec imageTag(String imageTag) {
    
    this.imageTag = imageTag;
    return this;
  }

   /**
   * Image Tag for Alluxio Fuse(e.g. 2.3.0-SNAPSHOT)
   * @return imageTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image Tag for Alluxio Fuse(e.g. 2.3.0-SNAPSHOT)")

  public String getImageTag() {
    return imageTag;
  }


  public void setImageTag(String imageTag) {
    this.imageTag = imageTag;
  }


  public AlluxioFuseSpec jvmOptions(List<String> jvmOptions) {
    
    this.jvmOptions = jvmOptions;
    return this;
  }

  public AlluxioFuseSpec addJvmOptionsItem(String jvmOptionsItem) {
    if (this.jvmOptions == null) {
      this.jvmOptions = new ArrayList<String>();
    }
    this.jvmOptions.add(jvmOptionsItem);
    return this;
  }

   /**
   * Options for JVM
   * @return jvmOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Options for JVM")

  public List<String> getJvmOptions() {
    return jvmOptions;
  }


  public void setJvmOptions(List<String> jvmOptions) {
    this.jvmOptions = jvmOptions;
  }


  public AlluxioFuseSpec networkMode(String networkMode) {
    
    this.networkMode = networkMode;
    return this;
  }

   /**
   * Whether to use hostnetwork or not
   * @return networkMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to use hostnetwork or not")

  public String getNetworkMode() {
    return networkMode;
  }


  public void setNetworkMode(String networkMode) {
    this.networkMode = networkMode;
  }


  public AlluxioFuseSpec nodeSelector(Map<String, String> nodeSelector) {
    
    this.nodeSelector = nodeSelector;
    return this;
  }

  public AlluxioFuseSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<String, String>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled
   * @return nodeSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled")

  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }


  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }


  public AlluxioFuseSpec podMetadata(PodMetadata podMetadata) {
    
    this.podMetadata = podMetadata;
    return this;
  }

   /**
   * Get podMetadata
   * @return podMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PodMetadata getPodMetadata() {
    return podMetadata;
  }


  public void setPodMetadata(PodMetadata podMetadata) {
    this.podMetadata = podMetadata;
  }


  public AlluxioFuseSpec properties(Map<String, String> properties) {
    
    this.properties = properties;
    return this;
  }

  public AlluxioFuseSpec putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Configurable properties for Alluxio System. &lt;br&gt; Refer to &lt;a href&#x3D;\&quot;https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\&quot;&gt;Alluxio Configuration Properties&lt;/a&gt; for more info
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Configurable properties for Alluxio System. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info")

  public Map<String, String> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public AlluxioFuseSpec resources(V1ResourceRequirements resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1ResourceRequirements getResources() {
    return resources;
  }


  public void setResources(V1ResourceRequirements resources) {
    this.resources = resources;
  }


  public AlluxioFuseSpec volumeMounts(List<V1VolumeMount> volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

  public AlluxioFuseSpec addVolumeMountsItem(V1VolumeMount volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<V1VolumeMount>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * VolumeMounts specifies the volumes listed in \&quot;.spec.volumes\&quot; to mount into the alluxio runtime component&#39;s filesystem.
   * @return volumeMounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into the alluxio runtime component's filesystem.")

  public List<V1VolumeMount> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<V1VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlluxioFuseSpec alluxioFuseSpec = (AlluxioFuseSpec) o;
    return Objects.equals(this.args, alluxioFuseSpec.args) &&
        Objects.equals(this.cleanPolicy, alluxioFuseSpec.cleanPolicy) &&
        Objects.equals(this.env, alluxioFuseSpec.env) &&
        Objects.equals(this.global, alluxioFuseSpec.global) &&
        Objects.equals(this.image, alluxioFuseSpec.image) &&
        Objects.equals(this.imagePullPolicy, alluxioFuseSpec.imagePullPolicy) &&
        Objects.equals(this.imageTag, alluxioFuseSpec.imageTag) &&
        Objects.equals(this.jvmOptions, alluxioFuseSpec.jvmOptions) &&
        Objects.equals(this.networkMode, alluxioFuseSpec.networkMode) &&
        Objects.equals(this.nodeSelector, alluxioFuseSpec.nodeSelector) &&
        Objects.equals(this.podMetadata, alluxioFuseSpec.podMetadata) &&
        Objects.equals(this.properties, alluxioFuseSpec.properties) &&
        Objects.equals(this.resources, alluxioFuseSpec.resources) &&
        Objects.equals(this.volumeMounts, alluxioFuseSpec.volumeMounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, cleanPolicy, env, global, image, imagePullPolicy, imageTag, jvmOptions, networkMode, nodeSelector, podMetadata, properties, resources, volumeMounts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlluxioFuseSpec {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cleanPolicy: ").append(toIndentedString(cleanPolicy)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    jvmOptions: ").append(toIndentedString(jvmOptions)).append("\n");
    sb.append("    networkMode: ").append(toIndentedString(networkMode)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    podMetadata: ").append(toIndentedString(podMetadata)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

