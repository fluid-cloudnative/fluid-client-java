/*
 * fluid
 * client for fluid
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import from kubernetes.client import V1ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import models.V1ContainerPort;
import models.V1EnvVar;
import models.V1Probe;
import models.V1VolumeMount;

/**
 * ThinFuseSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T11:55:35.636004+08:00[Asia/Shanghai]")
public class ThinFuseSpec {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = null;

  public static final String SERIALIZED_NAME_CLEAN_POLICY = "cleanPolicy";
  @SerializedName(SERIALIZED_NAME_CLEAN_POLICY)
  private String cleanPolicy;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = null;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<V1EnvVar> env = null;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private String imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_TAG = "imageTag";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAG)
  private String imageTag;

  public static final String SERIALIZED_NAME_LIVENESS_PROBE = "livenessProbe";
  @SerializedName(SERIALIZED_NAME_LIVENESS_PROBE)
  private V1Probe livenessProbe = null;

  public static final String SERIALIZED_NAME_NETWORK_MODE = "networkMode";
  @SerializedName(SERIALIZED_NAME_NETWORK_MODE)
  private String networkMode;

  public static final String SERIALIZED_NAME_NODE_SELECTOR = "nodeSelector";
  @SerializedName(SERIALIZED_NAME_NODE_SELECTOR)
  private Map<String, String> nodeSelector = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, String> options = null;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<V1ContainerPort> ports = null;

  public static final String SERIALIZED_NAME_READINESS_PROBE = "readinessProbe";
  @SerializedName(SERIALIZED_NAME_READINESS_PROBE)
  private V1Probe readinessProbe = null;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private V1ResourceRequirements resources = null;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<V1VolumeMount> volumeMounts = null;


  public ThinFuseSpec args(List<String> args) {
    
    this.args = args;
    return this;
  }

  public ThinFuseSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<String>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Arguments that will be passed to thinRuntime Fuse
   * @return args
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arguments that will be passed to thinRuntime Fuse")

  public List<String> getArgs() {
    return args;
  }


  public void setArgs(List<String> args) {
    this.args = args;
  }


  public ThinFuseSpec cleanPolicy(String cleanPolicy) {
    
    this.cleanPolicy = cleanPolicy;
    return this;
  }

   /**
   * CleanPolicy decides when to clean thinRuntime Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnDemand
   * @return cleanPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CleanPolicy decides when to clean thinRuntime Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once the fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnDemand")

  public String getCleanPolicy() {
    return cleanPolicy;
  }


  public void setCleanPolicy(String cleanPolicy) {
    this.cleanPolicy = cleanPolicy;
  }


  public ThinFuseSpec command(List<String> command) {
    
    this.command = command;
    return this;
  }

  public ThinFuseSpec addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<String>();
    }
    this.command.add(commandItem);
    return this;
  }

   /**
   * Command that will be passed to thinRuntime Fuse
   * @return command
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Command that will be passed to thinRuntime Fuse")

  public List<String> getCommand() {
    return command;
  }


  public void setCommand(List<String> command) {
    this.command = command;
  }


  public ThinFuseSpec env(List<V1EnvVar> env) {
    
    this.env = env;
    return this;
  }

  public ThinFuseSpec addEnvItem(V1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<V1EnvVar>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Environment variables that will be used by thinRuntime Fuse
   * @return env
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Environment variables that will be used by thinRuntime Fuse")

  public List<V1EnvVar> getEnv() {
    return env;
  }


  public void setEnv(List<V1EnvVar> env) {
    this.env = env;
  }


  public ThinFuseSpec image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Image for thinRuntime fuse
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image for thinRuntime fuse")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public ThinFuseSpec imagePullPolicy(String imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * One of the three policies: &#x60;Always&#x60;, &#x60;IfNotPresent&#x60;, &#x60;Never&#x60;
   * @return imagePullPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One of the three policies: `Always`, `IfNotPresent`, `Never`")

  public String getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public ThinFuseSpec imageTag(String imageTag) {
    
    this.imageTag = imageTag;
    return this;
  }

   /**
   * Image for thinRuntime fuse
   * @return imageTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image for thinRuntime fuse")

  public String getImageTag() {
    return imageTag;
  }


  public void setImageTag(String imageTag) {
    this.imageTag = imageTag;
  }


  public ThinFuseSpec livenessProbe(V1Probe livenessProbe) {
    
    this.livenessProbe = livenessProbe;
    return this;
  }

   /**
   * Get livenessProbe
   * @return livenessProbe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1Probe getLivenessProbe() {
    return livenessProbe;
  }


  public void setLivenessProbe(V1Probe livenessProbe) {
    this.livenessProbe = livenessProbe;
  }


  public ThinFuseSpec networkMode(String networkMode) {
    
    this.networkMode = networkMode;
    return this;
  }

   /**
   * Whether to use hostnetwork or not
   * @return networkMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to use hostnetwork or not")

  public String getNetworkMode() {
    return networkMode;
  }


  public void setNetworkMode(String networkMode) {
    this.networkMode = networkMode;
  }


  public ThinFuseSpec nodeSelector(Map<String, String> nodeSelector) {
    
    this.nodeSelector = nodeSelector;
    return this;
  }

  public ThinFuseSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<String, String>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled
   * @return nodeSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled")

  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }


  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }


  public ThinFuseSpec options(Map<String, String> options) {
    
    this.options = options;
    return this;
  }

  public ThinFuseSpec putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Options configurable options of FUSE client, performance parameters usually. will be merged with Dataset.spec.mounts.options into fuse pod.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Options configurable options of FUSE client, performance parameters usually. will be merged with Dataset.spec.mounts.options into fuse pod.")

  public Map<String, String> getOptions() {
    return options;
  }


  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public ThinFuseSpec ports(List<V1ContainerPort> ports) {
    
    this.ports = ports;
    return this;
  }

  public ThinFuseSpec addPortsItem(V1ContainerPort portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<V1ContainerPort>();
    }
    this.ports.add(portsItem);
    return this;
  }

   /**
   * Ports used thinRuntime
   * @return ports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ports used thinRuntime")

  public List<V1ContainerPort> getPorts() {
    return ports;
  }


  public void setPorts(List<V1ContainerPort> ports) {
    this.ports = ports;
  }


  public ThinFuseSpec readinessProbe(V1Probe readinessProbe) {
    
    this.readinessProbe = readinessProbe;
    return this;
  }

   /**
   * Get readinessProbe
   * @return readinessProbe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1Probe getReadinessProbe() {
    return readinessProbe;
  }


  public void setReadinessProbe(V1Probe readinessProbe) {
    this.readinessProbe = readinessProbe;
  }


  public ThinFuseSpec resources(V1ResourceRequirements resources) {
    
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1ResourceRequirements getResources() {
    return resources;
  }


  public void setResources(V1ResourceRequirements resources) {
    this.resources = resources;
  }


  public ThinFuseSpec volumeMounts(List<V1VolumeMount> volumeMounts) {
    
    this.volumeMounts = volumeMounts;
    return this;
  }

  public ThinFuseSpec addVolumeMountsItem(V1VolumeMount volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<V1VolumeMount>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * VolumeMounts specifies the volumes listed in \&quot;.spec.volumes\&quot; to mount into the thinruntime component&#39;s filesystem.
   * @return volumeMounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into the thinruntime component's filesystem.")

  public List<V1VolumeMount> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<V1VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThinFuseSpec thinFuseSpec = (ThinFuseSpec) o;
    return Objects.equals(this.args, thinFuseSpec.args) &&
        Objects.equals(this.cleanPolicy, thinFuseSpec.cleanPolicy) &&
        Objects.equals(this.command, thinFuseSpec.command) &&
        Objects.equals(this.env, thinFuseSpec.env) &&
        Objects.equals(this.image, thinFuseSpec.image) &&
        Objects.equals(this.imagePullPolicy, thinFuseSpec.imagePullPolicy) &&
        Objects.equals(this.imageTag, thinFuseSpec.imageTag) &&
        Objects.equals(this.livenessProbe, thinFuseSpec.livenessProbe) &&
        Objects.equals(this.networkMode, thinFuseSpec.networkMode) &&
        Objects.equals(this.nodeSelector, thinFuseSpec.nodeSelector) &&
        Objects.equals(this.options, thinFuseSpec.options) &&
        Objects.equals(this.ports, thinFuseSpec.ports) &&
        Objects.equals(this.readinessProbe, thinFuseSpec.readinessProbe) &&
        Objects.equals(this.resources, thinFuseSpec.resources) &&
        Objects.equals(this.volumeMounts, thinFuseSpec.volumeMounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, cleanPolicy, command, env, image, imagePullPolicy, imageTag, livenessProbe, networkMode, nodeSelector, options, ports, readinessProbe, resources, volumeMounts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThinFuseSpec {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cleanPolicy: ").append(toIndentedString(cleanPolicy)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    livenessProbe: ").append(toIndentedString(livenessProbe)).append("\n");
    sb.append("    networkMode: ").append(toIndentedString(networkMode)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    readinessProbe: ").append(toIndentedString(readinessProbe)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

