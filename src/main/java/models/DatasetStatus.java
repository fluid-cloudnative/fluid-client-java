/*
 * fluid
 * client for fluid
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import models.DatasetCondition;
import models.HCFSStatus;
import models.Mount;
import models.Runtime;

/**
 * DatasetStatus defines the observed state of Dataset
 */
@ApiModel(description = "DatasetStatus defines the observed state of Dataset")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T11:55:35.636004+08:00[Asia/Shanghai]")
public class DatasetStatus {
  public static final String SERIALIZED_NAME_CACHE_STATES = "cacheStates";
  @SerializedName(SERIALIZED_NAME_CACHE_STATES)
  private Map<String, String> cacheStates = null;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<DatasetCondition> conditions = new ArrayList<DatasetCondition>();

  public static final String SERIALIZED_NAME_DATA_BACKUP_REF = "dataBackupRef";
  @SerializedName(SERIALIZED_NAME_DATA_BACKUP_REF)
  private String dataBackupRef;

  public static final String SERIALIZED_NAME_DATA_LOAD_REF = "dataLoadRef";
  @SerializedName(SERIALIZED_NAME_DATA_LOAD_REF)
  private String dataLoadRef;

  public static final String SERIALIZED_NAME_DATASET_REF = "datasetRef";
  @SerializedName(SERIALIZED_NAME_DATASET_REF)
  private List<String> datasetRef = null;

  public static final String SERIALIZED_NAME_FILE_NUM = "fileNum";
  @SerializedName(SERIALIZED_NAME_FILE_NUM)
  private String fileNum;

  public static final String SERIALIZED_NAME_HCFS = "hcfs";
  @SerializedName(SERIALIZED_NAME_HCFS)
  private HCFSStatus hcfs;

  public static final String SERIALIZED_NAME_MOUNTS = "mounts";
  @SerializedName(SERIALIZED_NAME_MOUNTS)
  private List<Mount> mounts = null;

  public static final String SERIALIZED_NAME_OPERATION_REF = "operationRef";
  @SerializedName(SERIALIZED_NAME_OPERATION_REF)
  private Map<String, String> operationRef = null;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_RUNTIMES = "runtimes";
  @SerializedName(SERIALIZED_NAME_RUNTIMES)
  private List<Runtime> runtimes = null;

  public static final String SERIALIZED_NAME_UFS_TOTAL = "ufsTotal";
  @SerializedName(SERIALIZED_NAME_UFS_TOTAL)
  private String ufsTotal;


  public DatasetStatus cacheStates(Map<String, String> cacheStates) {
    
    this.cacheStates = cacheStates;
    return this;
  }

  public DatasetStatus putCacheStatesItem(String key, String cacheStatesItem) {
    if (this.cacheStates == null) {
      this.cacheStates = new HashMap<String, String>();
    }
    this.cacheStates.put(key, cacheStatesItem);
    return this;
  }

   /**
   * CacheStatus represents the total resources of the dataset.
   * @return cacheStates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CacheStatus represents the total resources of the dataset.")

  public Map<String, String> getCacheStates() {
    return cacheStates;
  }


  public void setCacheStates(Map<String, String> cacheStates) {
    this.cacheStates = cacheStates;
  }


  public DatasetStatus conditions(List<DatasetCondition> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public DatasetStatus addConditionsItem(DatasetCondition conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions is an array of current observed conditions.
   * @return conditions
  **/
  @ApiModelProperty(required = true, value = "Conditions is an array of current observed conditions.")

  public List<DatasetCondition> getConditions() {
    return conditions;
  }


  public void setConditions(List<DatasetCondition> conditions) {
    this.conditions = conditions;
  }


  public DatasetStatus dataBackupRef(String dataBackupRef) {
    
    this.dataBackupRef = dataBackupRef;
    return this;
  }

   /**
   * DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs. Deprecated, use OperationRef instead
   * @return dataBackupRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs. Deprecated, use OperationRef instead")

  public String getDataBackupRef() {
    return dataBackupRef;
  }


  public void setDataBackupRef(String dataBackupRef) {
    this.dataBackupRef = dataBackupRef;
  }


  public DatasetStatus dataLoadRef(String dataLoadRef) {
    
    this.dataLoadRef = dataLoadRef;
    return this;
  }

   /**
   * DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs. Deprecated, use OperationRef instead
   * @return dataLoadRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs. Deprecated, use OperationRef instead")

  public String getDataLoadRef() {
    return dataLoadRef;
  }


  public void setDataLoadRef(String dataLoadRef) {
    this.dataLoadRef = dataLoadRef;
  }


  public DatasetStatus datasetRef(List<String> datasetRef) {
    
    this.datasetRef = datasetRef;
    return this;
  }

  public DatasetStatus addDatasetRefItem(String datasetRefItem) {
    if (this.datasetRef == null) {
      this.datasetRef = new ArrayList<String>();
    }
    this.datasetRef.add(datasetRefItem);
    return this;
  }

   /**
   * DatasetRef specifies the datasets namespaced name mounting this Dataset.
   * @return datasetRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DatasetRef specifies the datasets namespaced name mounting this Dataset.")

  public List<String> getDatasetRef() {
    return datasetRef;
  }


  public void setDatasetRef(List<String> datasetRef) {
    this.datasetRef = datasetRef;
  }


  public DatasetStatus fileNum(String fileNum) {
    
    this.fileNum = fileNum;
    return this;
  }

   /**
   * FileNum represents the file numbers of the dataset
   * @return fileNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FileNum represents the file numbers of the dataset")

  public String getFileNum() {
    return fileNum;
  }


  public void setFileNum(String fileNum) {
    this.fileNum = fileNum;
  }


  public DatasetStatus hcfs(HCFSStatus hcfs) {
    
    this.hcfs = hcfs;
    return this;
  }

   /**
   * Get hcfs
   * @return hcfs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HCFSStatus getHcfs() {
    return hcfs;
  }


  public void setHcfs(HCFSStatus hcfs) {
    this.hcfs = hcfs;
  }


  public DatasetStatus mounts(List<Mount> mounts) {
    
    this.mounts = mounts;
    return this;
  }

  public DatasetStatus addMountsItem(Mount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<Mount>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

   /**
   * the info of mount points have been mounted
   * @return mounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the info of mount points have been mounted")

  public List<Mount> getMounts() {
    return mounts;
  }


  public void setMounts(List<Mount> mounts) {
    this.mounts = mounts;
  }


  public DatasetStatus operationRef(Map<String, String> operationRef) {
    
    this.operationRef = operationRef;
    return this;
  }

  public DatasetStatus putOperationRefItem(String key, String operationRefItem) {
    if (this.operationRef == null) {
      this.operationRef = new HashMap<String, String>();
    }
    this.operationRef.put(key, operationRefItem);
    return this;
  }

   /**
   * OperationRef specifies the Operation that targets this Dataset. This is mainly used as a lock to prevent concurrent same Operation jobs.
   * @return operationRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OperationRef specifies the Operation that targets this Dataset. This is mainly used as a lock to prevent concurrent same Operation jobs.")

  public Map<String, String> getOperationRef() {
    return operationRef;
  }


  public void setOperationRef(Map<String, String> operationRef) {
    this.operationRef = operationRef;
  }


  public DatasetStatus phase(String phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Dataset Phase. One of the four phases: &#x60;Pending&#x60;, &#x60;Bound&#x60;, &#x60;NotBound&#x60; and &#x60;Failed&#x60;
   * @return phase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dataset Phase. One of the four phases: `Pending`, `Bound`, `NotBound` and `Failed`")

  public String getPhase() {
    return phase;
  }


  public void setPhase(String phase) {
    this.phase = phase;
  }


  public DatasetStatus runtimes(List<Runtime> runtimes) {
    
    this.runtimes = runtimes;
    return this;
  }

  public DatasetStatus addRuntimesItem(Runtime runtimesItem) {
    if (this.runtimes == null) {
      this.runtimes = new ArrayList<Runtime>();
    }
    this.runtimes.add(runtimesItem);
    return this;
  }

   /**
   * Runtimes for supporting dataset
   * @return runtimes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Runtimes for supporting dataset")

  public List<Runtime> getRuntimes() {
    return runtimes;
  }


  public void setRuntimes(List<Runtime> runtimes) {
    this.runtimes = runtimes;
  }


  public DatasetStatus ufsTotal(String ufsTotal) {
    
    this.ufsTotal = ufsTotal;
    return this;
  }

   /**
   * Total in GB of dataset in the cluster
   * @return ufsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total in GB of dataset in the cluster")

  public String getUfsTotal() {
    return ufsTotal;
  }


  public void setUfsTotal(String ufsTotal) {
    this.ufsTotal = ufsTotal;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetStatus datasetStatus = (DatasetStatus) o;
    return Objects.equals(this.cacheStates, datasetStatus.cacheStates) &&
        Objects.equals(this.conditions, datasetStatus.conditions) &&
        Objects.equals(this.dataBackupRef, datasetStatus.dataBackupRef) &&
        Objects.equals(this.dataLoadRef, datasetStatus.dataLoadRef) &&
        Objects.equals(this.datasetRef, datasetStatus.datasetRef) &&
        Objects.equals(this.fileNum, datasetStatus.fileNum) &&
        Objects.equals(this.hcfs, datasetStatus.hcfs) &&
        Objects.equals(this.mounts, datasetStatus.mounts) &&
        Objects.equals(this.operationRef, datasetStatus.operationRef) &&
        Objects.equals(this.phase, datasetStatus.phase) &&
        Objects.equals(this.runtimes, datasetStatus.runtimes) &&
        Objects.equals(this.ufsTotal, datasetStatus.ufsTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheStates, conditions, dataBackupRef, dataLoadRef, datasetRef, fileNum, hcfs, mounts, operationRef, phase, runtimes, ufsTotal);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetStatus {\n");
    sb.append("    cacheStates: ").append(toIndentedString(cacheStates)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    dataBackupRef: ").append(toIndentedString(dataBackupRef)).append("\n");
    sb.append("    dataLoadRef: ").append(toIndentedString(dataLoadRef)).append("\n");
    sb.append("    datasetRef: ").append(toIndentedString(datasetRef)).append("\n");
    sb.append("    fileNum: ").append(toIndentedString(fileNum)).append("\n");
    sb.append("    hcfs: ").append(toIndentedString(hcfs)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    operationRef: ").append(toIndentedString(operationRef)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    runtimes: ").append(toIndentedString(runtimes)).append("\n");
    sb.append("    ufsTotal: ").append(toIndentedString(ufsTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

