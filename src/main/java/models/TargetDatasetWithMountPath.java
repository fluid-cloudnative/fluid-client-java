/*
 * fluid
 * client for fluid
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TargetDataset defines which dataset will be processed by DataProcess. Under the hood, the dataset&#39;s pvc will be mounted to the given mountPath of the DataProcess&#39;s containers.
 */
@ApiModel(description = "TargetDataset defines which dataset will be processed by DataProcess. Under the hood, the dataset's pvc will be mounted to the given mountPath of the DataProcess's containers.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T11:55:35.636004+08:00[Asia/Shanghai]")
public class TargetDatasetWithMountPath {
  public static final String SERIALIZED_NAME_MOUNT_PATH = "mountPath";
  @SerializedName(SERIALIZED_NAME_MOUNT_PATH)
  private String mountPath = "";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SUB_PATH = "subPath";
  @SerializedName(SERIALIZED_NAME_SUB_PATH)
  private String subPath;


  public TargetDatasetWithMountPath mountPath(String mountPath) {
    
    this.mountPath = mountPath;
    return this;
  }

   /**
   * MountPath defines where the Dataset should be mounted in DataProcess&#39;s containers.
   * @return mountPath
  **/
  @ApiModelProperty(required = true, value = "MountPath defines where the Dataset should be mounted in DataProcess's containers.")

  public String getMountPath() {
    return mountPath;
  }


  public void setMountPath(String mountPath) {
    this.mountPath = mountPath;
  }


  public TargetDatasetWithMountPath name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name defines name of the target dataset
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name defines name of the target dataset")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TargetDatasetWithMountPath namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Namespace defines namespace of the target dataset
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Namespace defines namespace of the target dataset")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public TargetDatasetWithMountPath subPath(String subPath) {
    
    this.subPath = subPath;
    return this;
  }

   /**
   * SubPath defines subpath of the target dataset to mount.
   * @return subPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SubPath defines subpath of the target dataset to mount.")

  public String getSubPath() {
    return subPath;
  }


  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetDatasetWithMountPath targetDatasetWithMountPath = (TargetDatasetWithMountPath) o;
    return Objects.equals(this.mountPath, targetDatasetWithMountPath.mountPath) &&
        Objects.equals(this.name, targetDatasetWithMountPath.name) &&
        Objects.equals(this.namespace, targetDatasetWithMountPath.namespace) &&
        Objects.equals(this.subPath, targetDatasetWithMountPath.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mountPath, name, namespace, subPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetDatasetWithMountPath {\n");
    sb.append("    mountPath: ").append(toIndentedString(mountPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

