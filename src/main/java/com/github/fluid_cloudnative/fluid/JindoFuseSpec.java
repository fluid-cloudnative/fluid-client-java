/*
 * fluid
 * Python SDK for fluid
 *
 * OpenAPI spec version: v0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluid_cloudnative.fluid;

import com.google.gson.annotations.SerializedName;
import io.kubernetes.client.openapi.models.V1ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * JindoFuseSpec is a description of the Jindo Fuse
 */
@ApiModel(description = "JindoFuseSpec is a description of the Jindo Fuse")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-14T16:48:53.494+08:00")
public class JindoFuseSpec {
  @SerializedName("args")
  private List<String> args = null;

  @SerializedName("env")
  private Map<String, String> env = null;

  @SerializedName("global")
  private Boolean global = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("imagePullPolicy")
  private String imagePullPolicy = null;

  @SerializedName("imageTag")
  private String imageTag = null;

  @SerializedName("nodeSelector")
  private Map<String, String> nodeSelector = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("resources")
  private V1ResourceRequirements resources = null;

  public JindoFuseSpec args(List<String> args) {
    this.args = args;
    return this;
  }

  public JindoFuseSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<String>();
    }
    this.args.add(argsItem);
    return this;
  }

   /**
   * Arguments that will be passed to Jindo Fuse
   * @return args
  **/
  @ApiModelProperty(value = "Arguments that will be passed to Jindo Fuse")
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }

  public JindoFuseSpec env(Map<String, String> env) {
    this.env = env;
    return this;
  }

  public JindoFuseSpec putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<String, String>();
    }
    this.env.put(key, envItem);
    return this;
  }

   /**
   * Environment variables that will be used by Jindo Fuse
   * @return env
  **/
  @ApiModelProperty(value = "Environment variables that will be used by Jindo Fuse")
  public Map<String, String> getEnv() {
    return env;
  }

  public void setEnv(Map<String, String> env) {
    this.env = env;
  }

  public JindoFuseSpec global(Boolean global) {
    this.global = global;
    return this;
  }

   /**
   * If the fuse client should be deployed in global mode, otherwise the affinity should be considered
   * @return global
  **/
  @ApiModelProperty(value = "If the fuse client should be deployed in global mode, otherwise the affinity should be considered")
  public Boolean isGlobal() {
    return global;
  }

  public void setGlobal(Boolean global) {
    this.global = global;
  }

  public JindoFuseSpec image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Image for Jindo Fuse(e.g. jindo/jindo-fuse)
   * @return image
  **/
  @ApiModelProperty(value = "Image for Jindo Fuse(e.g. jindo/jindo-fuse)")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public JindoFuseSpec imagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * One of the three policies: &#x60;Always&#x60;, &#x60;IfNotPresent&#x60;, &#x60;Never&#x60;
   * @return imagePullPolicy
  **/
  @ApiModelProperty(value = "One of the three policies: `Always`, `IfNotPresent`, `Never`")
  public String getImagePullPolicy() {
    return imagePullPolicy;
  }

  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }

  public JindoFuseSpec imageTag(String imageTag) {
    this.imageTag = imageTag;
    return this;
  }

   /**
   * Image Tag for Jindo Fuse(e.g. 2.3.0-SNAPSHOT)
   * @return imageTag
  **/
  @ApiModelProperty(value = "Image Tag for Jindo Fuse(e.g. 2.3.0-SNAPSHOT)")
  public String getImageTag() {
    return imageTag;
  }

  public void setImageTag(String imageTag) {
    this.imageTag = imageTag;
  }

  public JindoFuseSpec nodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
    return this;
  }

  public JindoFuseSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<String, String>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled
   * @return nodeSelector
  **/
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled")
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }

  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }

  public JindoFuseSpec properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public JindoFuseSpec putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Configurable properties for Jindo System. &lt;br&gt;
   * @return properties
  **/
  @ApiModelProperty(value = "Configurable properties for Jindo System. <br>")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public JindoFuseSpec resources(V1ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Resources that will be requested by Jindo Fuse. &lt;br&gt; &lt;br&gt; Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
   * @return resources
  **/
  @ApiModelProperty(value = "Resources that will be requested by Jindo Fuse. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.")
  public V1ResourceRequirements getResources() {
    return resources;
  }

  public void setResources(V1ResourceRequirements resources) {
    this.resources = resources;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JindoFuseSpec jindoFuseSpec = (JindoFuseSpec) o;
    return Objects.equals(this.args, jindoFuseSpec.args) &&
        Objects.equals(this.env, jindoFuseSpec.env) &&
        Objects.equals(this.global, jindoFuseSpec.global) &&
        Objects.equals(this.image, jindoFuseSpec.image) &&
        Objects.equals(this.imagePullPolicy, jindoFuseSpec.imagePullPolicy) &&
        Objects.equals(this.imageTag, jindoFuseSpec.imageTag) &&
        Objects.equals(this.nodeSelector, jindoFuseSpec.nodeSelector) &&
        Objects.equals(this.properties, jindoFuseSpec.properties) &&
        Objects.equals(this.resources, jindoFuseSpec.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, env, global, image, imagePullPolicy, imageTag, nodeSelector, properties, resources);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JindoFuseSpec {\n");
    
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

