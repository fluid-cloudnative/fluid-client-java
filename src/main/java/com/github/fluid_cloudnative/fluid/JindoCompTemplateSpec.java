/*
 * fluid
 * Python SDK for fluid
 *
 * OpenAPI spec version: v0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluid_cloudnative.fluid;

import com.google.gson.annotations.SerializedName;
import io.kubernetes.client.openapi.models.V1ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * JindoCompTemplateSpec is a description of the Jindo commponents
 */
@ApiModel(description = "JindoCompTemplateSpec is a description of the Jindo commponents")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-14T16:48:53.494+08:00")
public class JindoCompTemplateSpec {
  @SerializedName("env")
  private Map<String, String> env = null;

  @SerializedName("nodeSelector")
  private Map<String, String> nodeSelector = null;

  @SerializedName("ports")
  private Map<String, Integer> ports = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("replicas")
  private Integer replicas = null;

  @SerializedName("resources")
  private V1ResourceRequirements resources = null;

  public JindoCompTemplateSpec env(Map<String, String> env) {
    this.env = env;
    return this;
  }

  public JindoCompTemplateSpec putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<String, String>();
    }
    this.env.put(key, envItem);
    return this;
  }

   /**
   * Environment variables that will be used by Jindo component. &lt;br&gt;
   * @return env
  **/
  @ApiModelProperty(value = "Environment variables that will be used by Jindo component. <br>")
  public Map<String, String> getEnv() {
    return env;
  }

  public void setEnv(Map<String, String> env) {
    this.env = env;
  }

  public JindoCompTemplateSpec nodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
    return this;
  }

  public JindoCompTemplateSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<String, String>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the master to fit on a node
   * @return nodeSelector
  **/
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the master to fit on a node")
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }

  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }

  public JindoCompTemplateSpec ports(Map<String, Integer> ports) {
    this.ports = ports;
    return this;
  }

  public JindoCompTemplateSpec putPortsItem(String key, Integer portsItem) {
    if (this.ports == null) {
      this.ports = new HashMap<String, Integer>();
    }
    this.ports.put(key, portsItem);
    return this;
  }

   /**
   * Get ports
   * @return ports
  **/
  @ApiModelProperty(value = "")
  public Map<String, Integer> getPorts() {
    return ports;
  }

  public void setPorts(Map<String, Integer> ports) {
    this.ports = ports;
  }

  public JindoCompTemplateSpec properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public JindoCompTemplateSpec putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Configurable properties for the Jindo component. &lt;br&gt;
   * @return properties
  **/
  @ApiModelProperty(value = "Configurable properties for the Jindo component. <br>")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public JindoCompTemplateSpec replicas(Integer replicas) {
    this.replicas = replicas;
    return this;
  }

   /**
   * Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster
   * @return replicas
  **/
  @ApiModelProperty(value = "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster")
  public Integer getReplicas() {
    return replicas;
  }

  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }

  public JindoCompTemplateSpec resources(V1ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Resources that will be requested by the Jindo component. &lt;br&gt; &lt;br&gt; Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
   * @return resources
  **/
  @ApiModelProperty(value = "Resources that will be requested by the Jindo component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.")
  public V1ResourceRequirements getResources() {
    return resources;
  }

  public void setResources(V1ResourceRequirements resources) {
    this.resources = resources;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JindoCompTemplateSpec jindoCompTemplateSpec = (JindoCompTemplateSpec) o;
    return Objects.equals(this.env, jindoCompTemplateSpec.env) &&
        Objects.equals(this.nodeSelector, jindoCompTemplateSpec.nodeSelector) &&
        Objects.equals(this.ports, jindoCompTemplateSpec.ports) &&
        Objects.equals(this.properties, jindoCompTemplateSpec.properties) &&
        Objects.equals(this.replicas, jindoCompTemplateSpec.replicas) &&
        Objects.equals(this.resources, jindoCompTemplateSpec.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, nodeSelector, ports, properties, replicas, resources);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JindoCompTemplateSpec {\n");
    
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

