/*
 * fluid
 * Python SDK for fluid
 *
 * OpenAPI spec version: v0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluid_cloudnative.fluid;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * DatasetStatus defines the observed state of Dataset
 */
@ApiModel(description = "DatasetStatus defines the observed state of Dataset")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-14T16:48:53.494+08:00")
public class DatasetStatus {
  @SerializedName("cacheStates")
  private Map<String, String> cacheStates = null;

  @SerializedName("conditions")
  private List<DatasetCondition> conditions = new ArrayList<DatasetCondition>();

  @SerializedName("dataBackupRef")
  private String dataBackupRef = null;

  @SerializedName("dataLoadRef")
  private String dataLoadRef = null;

  @SerializedName("fileNum")
  private String fileNum = null;

  @SerializedName("hcfs")
  private HCFSStatus hcfs = null;

  @SerializedName("phase")
  private String phase = null;

  @SerializedName("runtimes")
  private List<Runtime> runtimes = null;

  @SerializedName("ufsTotal")
  private String ufsTotal = null;

  public DatasetStatus cacheStates(Map<String, String> cacheStates) {
    this.cacheStates = cacheStates;
    return this;
  }

  public DatasetStatus putCacheStatesItem(String key, String cacheStatesItem) {
    if (this.cacheStates == null) {
      this.cacheStates = new HashMap<String, String>();
    }
    this.cacheStates.put(key, cacheStatesItem);
    return this;
  }

   /**
   * CacheStatus represents the total resources of the dataset.
   * @return cacheStates
  **/
  @ApiModelProperty(value = "CacheStatus represents the total resources of the dataset.")
  public Map<String, String> getCacheStates() {
    return cacheStates;
  }

  public void setCacheStates(Map<String, String> cacheStates) {
    this.cacheStates = cacheStates;
  }

  public DatasetStatus conditions(List<DatasetCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public DatasetStatus addConditionsItem(DatasetCondition conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions is an array of current observed conditions.
   * @return conditions
  **/
  @ApiModelProperty(required = true, value = "Conditions is an array of current observed conditions.")
  public List<DatasetCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<DatasetCondition> conditions) {
    this.conditions = conditions;
  }

  public DatasetStatus dataBackupRef(String dataBackupRef) {
    this.dataBackupRef = dataBackupRef;
    return this;
  }

   /**
   * DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs.
   * @return dataBackupRef
  **/
  @ApiModelProperty(value = "DataBackupRef specifies the running Backup job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataBackup jobs.")
  public String getDataBackupRef() {
    return dataBackupRef;
  }

  public void setDataBackupRef(String dataBackupRef) {
    this.dataBackupRef = dataBackupRef;
  }

  public DatasetStatus dataLoadRef(String dataLoadRef) {
    this.dataLoadRef = dataLoadRef;
    return this;
  }

   /**
   * DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs.
   * @return dataLoadRef
  **/
  @ApiModelProperty(value = "DataLoadRef specifies the running DataLoad job that targets this Dataset. This is mainly used as a lock to prevent concurrent DataLoad jobs.")
  public String getDataLoadRef() {
    return dataLoadRef;
  }

  public void setDataLoadRef(String dataLoadRef) {
    this.dataLoadRef = dataLoadRef;
  }

  public DatasetStatus fileNum(String fileNum) {
    this.fileNum = fileNum;
    return this;
  }

   /**
   * FileNum represents the file numbers of the dataset
   * @return fileNum
  **/
  @ApiModelProperty(value = "FileNum represents the file numbers of the dataset")
  public String getFileNum() {
    return fileNum;
  }

  public void setFileNum(String fileNum) {
    this.fileNum = fileNum;
  }

  public DatasetStatus hcfs(HCFSStatus hcfs) {
    this.hcfs = hcfs;
    return this;
  }

   /**
   * HCFSStatus represents hcfs info
   * @return hcfs
  **/
  @ApiModelProperty(value = "HCFSStatus represents hcfs info")
  public HCFSStatus getHcfs() {
    return hcfs;
  }

  public void setHcfs(HCFSStatus hcfs) {
    this.hcfs = hcfs;
  }

  public DatasetStatus phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Dataset Phase. One of the four phases: &#x60;Pending&#x60;, &#x60;Bound&#x60;, &#x60;NotBound&#x60; and &#x60;Failed&#x60;
   * @return phase
  **/
  @ApiModelProperty(value = "Dataset Phase. One of the four phases: `Pending`, `Bound`, `NotBound` and `Failed`")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public DatasetStatus runtimes(List<Runtime> runtimes) {
    this.runtimes = runtimes;
    return this;
  }

  public DatasetStatus addRuntimesItem(Runtime runtimesItem) {
    if (this.runtimes == null) {
      this.runtimes = new ArrayList<Runtime>();
    }
    this.runtimes.add(runtimesItem);
    return this;
  }

   /**
   * Runtimes for supporting dataset
   * @return runtimes
  **/
  @ApiModelProperty(value = "Runtimes for supporting dataset")
  public List<Runtime> getRuntimes() {
    return runtimes;
  }

  public void setRuntimes(List<Runtime> runtimes) {
    this.runtimes = runtimes;
  }

  public DatasetStatus ufsTotal(String ufsTotal) {
    this.ufsTotal = ufsTotal;
    return this;
  }

   /**
   * Total in GB of dataset in the cluster
   * @return ufsTotal
  **/
  @ApiModelProperty(value = "Total in GB of dataset in the cluster")
  public String getUfsTotal() {
    return ufsTotal;
  }

  public void setUfsTotal(String ufsTotal) {
    this.ufsTotal = ufsTotal;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetStatus datasetStatus = (DatasetStatus) o;
    return Objects.equals(this.cacheStates, datasetStatus.cacheStates) &&
        Objects.equals(this.conditions, datasetStatus.conditions) &&
        Objects.equals(this.dataBackupRef, datasetStatus.dataBackupRef) &&
        Objects.equals(this.dataLoadRef, datasetStatus.dataLoadRef) &&
        Objects.equals(this.fileNum, datasetStatus.fileNum) &&
        Objects.equals(this.hcfs, datasetStatus.hcfs) &&
        Objects.equals(this.phase, datasetStatus.phase) &&
        Objects.equals(this.runtimes, datasetStatus.runtimes) &&
        Objects.equals(this.ufsTotal, datasetStatus.ufsTotal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheStates, conditions, dataBackupRef, dataLoadRef, fileNum, hcfs, phase, runtimes, ufsTotal);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetStatus {\n");
    
    sb.append("    cacheStates: ").append(toIndentedString(cacheStates)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    dataBackupRef: ").append(toIndentedString(dataBackupRef)).append("\n");
    sb.append("    dataLoadRef: ").append(toIndentedString(dataLoadRef)).append("\n");
    sb.append("    fileNum: ").append(toIndentedString(fileNum)).append("\n");
    sb.append("    hcfs: ").append(toIndentedString(hcfs)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    runtimes: ").append(toIndentedString(runtimes)).append("\n");
    sb.append("    ufsTotal: ").append(toIndentedString(ufsTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

