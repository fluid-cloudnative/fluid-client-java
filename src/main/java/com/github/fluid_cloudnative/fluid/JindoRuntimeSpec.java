/*
 * fluid
 * Python SDK for fluid
 *
 * OpenAPI spec version: v0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluid_cloudnative.fluid;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;


/**
 * JindoRuntimeSpec defines the desired state of JindoRuntime
 */
@ApiModel(description = "JindoRuntimeSpec defines the desired state of JindoRuntime")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-14T16:48:53.494+08:00")
public class JindoRuntimeSpec {
  @SerializedName("fuse")
  private JindoFuseSpec fuse = null;

  @SerializedName("hadoopConfig")
  private String hadoopConfig = null;

  @SerializedName("jindoVersion")
  private VersionSpec jindoVersion = null;

  @SerializedName("master")
  private JindoCompTemplateSpec master = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  @SerializedName("replicas")
  private Integer replicas = null;

  @SerializedName("runAs")
  private User runAs = null;

  @SerializedName("secret")
  private String secret = null;

  @SerializedName("tieredstore")
  private Tieredstore tieredstore = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("worker")
  private JindoCompTemplateSpec worker = null;

  public JindoRuntimeSpec fuse(JindoFuseSpec fuse) {
    this.fuse = fuse;
    return this;
  }

   /**
   * Desired state for Jindo Fuse
   * @return fuse
  **/
  @ApiModelProperty(value = "Desired state for Jindo Fuse")
  public JindoFuseSpec getFuse() {
    return fuse;
  }

  public void setFuse(JindoFuseSpec fuse) {
    this.fuse = fuse;
  }

  public JindoRuntimeSpec hadoopConfig(String hadoopConfig) {
    this.hadoopConfig = hadoopConfig;
    return this;
  }

   /**
   * Name of the configMap used to support HDFS configurations when using HDFS as Jindo&#39;s UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \&quot;hdfs-site.xml\&quot; and \&quot;core-site.xml\&quot; are supported. It must take the filename of the conf file as the key and content of the file as the value.
   * @return hadoopConfig
  **/
  @ApiModelProperty(value = "Name of the configMap used to support HDFS configurations when using HDFS as Jindo's UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.")
  public String getHadoopConfig() {
    return hadoopConfig;
  }

  public void setHadoopConfig(String hadoopConfig) {
    this.hadoopConfig = hadoopConfig;
  }

  public JindoRuntimeSpec jindoVersion(VersionSpec jindoVersion) {
    this.jindoVersion = jindoVersion;
    return this;
  }

   /**
   * The version information that instructs fluid to orchestrate a particular version of Jindo.
   * @return jindoVersion
  **/
  @ApiModelProperty(value = "The version information that instructs fluid to orchestrate a particular version of Jindo.")
  public VersionSpec getJindoVersion() {
    return jindoVersion;
  }

  public void setJindoVersion(VersionSpec jindoVersion) {
    this.jindoVersion = jindoVersion;
  }

  public JindoRuntimeSpec master(JindoCompTemplateSpec master) {
    this.master = master;
    return this;
  }

   /**
   * Desired state for Jindo master
   * @return master
  **/
  @ApiModelProperty(value = "Desired state for Jindo master")
  public JindoCompTemplateSpec getMaster() {
    return master;
  }

  public void setMaster(JindoCompTemplateSpec master) {
    this.master = master;
  }

  public JindoRuntimeSpec properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public JindoRuntimeSpec putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Configurable properties for Jindo system. &lt;br&gt;
   * @return properties
  **/
  @ApiModelProperty(value = "Configurable properties for Jindo system. <br>")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public JindoRuntimeSpec replicas(Integer replicas) {
    this.replicas = replicas;
    return this;
  }

   /**
   * The replicas of the worker, need to be specified
   * @return replicas
  **/
  @ApiModelProperty(value = "The replicas of the worker, need to be specified")
  public Integer getReplicas() {
    return replicas;
  }

  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }

  public JindoRuntimeSpec runAs(User runAs) {
    this.runAs = runAs;
    return this;
  }

   /**
   * Manage the user to run Jindo Runtime
   * @return runAs
  **/
  @ApiModelProperty(value = "Manage the user to run Jindo Runtime")
  public User getRunAs() {
    return runAs;
  }

  public void setRunAs(User runAs) {
    this.runAs = runAs;
  }

  public JindoRuntimeSpec secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @ApiModelProperty(value = "")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public JindoRuntimeSpec tieredstore(Tieredstore tieredstore) {
    this.tieredstore = tieredstore;
    return this;
  }

   /**
   * Tiered storage used by Jindo
   * @return tieredstore
  **/
  @ApiModelProperty(value = "Tiered storage used by Jindo")
  public Tieredstore getTieredstore() {
    return tieredstore;
  }

  public void setTieredstore(Tieredstore tieredstore) {
    this.tieredstore = tieredstore;
  }

  public JindoRuntimeSpec user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @ApiModelProperty(value = "")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public JindoRuntimeSpec worker(JindoCompTemplateSpec worker) {
    this.worker = worker;
    return this;
  }

   /**
   * Desired state for Jindo worker
   * @return worker
  **/
  @ApiModelProperty(value = "Desired state for Jindo worker")
  public JindoCompTemplateSpec getWorker() {
    return worker;
  }

  public void setWorker(JindoCompTemplateSpec worker) {
    this.worker = worker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JindoRuntimeSpec jindoRuntimeSpec = (JindoRuntimeSpec) o;
    return Objects.equals(this.fuse, jindoRuntimeSpec.fuse) &&
        Objects.equals(this.hadoopConfig, jindoRuntimeSpec.hadoopConfig) &&
        Objects.equals(this.jindoVersion, jindoRuntimeSpec.jindoVersion) &&
        Objects.equals(this.master, jindoRuntimeSpec.master) &&
        Objects.equals(this.properties, jindoRuntimeSpec.properties) &&
        Objects.equals(this.replicas, jindoRuntimeSpec.replicas) &&
        Objects.equals(this.runAs, jindoRuntimeSpec.runAs) &&
        Objects.equals(this.secret, jindoRuntimeSpec.secret) &&
        Objects.equals(this.tieredstore, jindoRuntimeSpec.tieredstore) &&
        Objects.equals(this.user, jindoRuntimeSpec.user) &&
        Objects.equals(this.worker, jindoRuntimeSpec.worker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fuse, hadoopConfig, jindoVersion, master, properties, replicas, runAs, secret, tieredstore, user, worker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JindoRuntimeSpec {\n");
    
    sb.append("    fuse: ").append(toIndentedString(fuse)).append("\n");
    sb.append("    hadoopConfig: ").append(toIndentedString(hadoopConfig)).append("\n");
    sb.append("    jindoVersion: ").append(toIndentedString(jindoVersion)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    runAs: ").append(toIndentedString(runAs)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    tieredstore: ").append(toIndentedString(tieredstore)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    worker: ").append(toIndentedString(worker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

