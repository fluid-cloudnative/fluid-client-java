/*
 * fluid
 * Python SDK for fluid
 *
 * OpenAPI spec version: v0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.fluid_cloudnative.fluid;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * DataBackupStatus defines the observed state of DataBackup
 */
@ApiModel(description = "DataBackupStatus defines the observed state of DataBackup")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-14T16:48:53.494+08:00")
public class DataBackupStatus {
  @SerializedName("backupLocation")
  private BackupLocation backupLocation = null;

  @SerializedName("conditions")
  private List<Condition> conditions = new ArrayList<Condition>();

  @SerializedName("duration")
  private String duration = null;

  @SerializedName("phase")
  private String phase = null;

  public DataBackupStatus backupLocation(BackupLocation backupLocation) {
    this.backupLocation = backupLocation;
    return this;
  }

   /**
   * BackupLocation tell user the location to save data of the DataBackup
   * @return backupLocation
  **/
  @ApiModelProperty(value = "BackupLocation tell user the location to save data of the DataBackup")
  public BackupLocation getBackupLocation() {
    return backupLocation;
  }

  public void setBackupLocation(BackupLocation backupLocation) {
    this.backupLocation = backupLocation;
  }

  public DataBackupStatus conditions(List<Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public DataBackupStatus addConditionsItem(Condition conditionsItem) {
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions consists of transition information on DataBackup&#39;s Phase
   * @return conditions
  **/
  @ApiModelProperty(required = true, value = "Conditions consists of transition information on DataBackup's Phase")
  public List<Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<Condition> conditions) {
    this.conditions = conditions;
  }

  public DataBackupStatus duration(String duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Duration tell user how much time was spent to backup
   * @return duration
  **/
  @ApiModelProperty(required = true, value = "Duration tell user how much time was spent to backup")
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }

  public DataBackupStatus phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Phase describes current phase of DataBackup
   * @return phase
  **/
  @ApiModelProperty(required = true, value = "Phase describes current phase of DataBackup")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBackupStatus dataBackupStatus = (DataBackupStatus) o;
    return Objects.equals(this.backupLocation, dataBackupStatus.backupLocation) &&
        Objects.equals(this.conditions, dataBackupStatus.conditions) &&
        Objects.equals(this.duration, dataBackupStatus.duration) &&
        Objects.equals(this.phase, dataBackupStatus.phase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupLocation, conditions, duration, phase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBackupStatus {\n");
    
    sb.append("    backupLocation: ").append(toIndentedString(backupLocation)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

